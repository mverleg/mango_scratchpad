
#
# ORM example of composing types for individual fields
#

class User:
    id: Id
    last_changed: Timestamp
    name: String
    birthday: Date?
    accounts: Relations<out Account>

# This stuff should get implemented depending on what kind of query is done
trait IUser:
    pass
trait User_Id required IUser:
    fn id()
trait User_Timestamp required IUser:
    fn timestamp()
trait User_Name required IUser:
    fn name()
trait User_Birthday required IUser:
    fn birthday()
trait User_SavingAccounts<Relations<T>> requires IUser where T: IAccount:
    fn saving_accounts()
trait User_SpendingAccounts<Relations<T>> requires IUser where T: IAccount:
    fn spending_accounts()
trait User_AllAccounts<Relations<T>> requires IUser where T: IAccount:
    fn accounts()
# TODO: somehow AllAccounts implies SavingAccounts and SpendingAccounts

class Account:
    user: User
    name: String
    description: String?
    transfers_from: Relations<out Transfer>
    transfers_to: Relations<out Transfer>

trait IAccount:
    pass
trait Account_User requires IAccount:
    fn user()
trait Account_Name requires IAccount:
    fn name()
trait Account_Description requires IAccount:
    fn description()
trait Account_TransfersFrom<Relations<T>> requires IAccount where T: ITransfer:
    fn transfers_from()
trait Account_TransfersTo<Relations<T>>  requires IAccount where T: ITransfer:
    fn transfers_to()

class Transfer:
    from: Account
    date: Date
    creator: User?
    lines: Relations<Lines>

trait ITransfer:
    pass
trait Transfer_From requires ITransfer:
    fn from()
trait Transfer_Date requires ITransfer:
    fn date()
trait Transfer_Creator requires ITransfer:
    fn creator()
trait Transfer_Lines<Relations<T>> where T: ILine requires ITransfer:
    fn lines()

class Line:
    to: Account
    transfer: Transfer
    amount: Amount

trait ILine:
    pass
trait Line_To requires ILine:
    fn to()
trait Line_Transfer requires ILine:
    fn transfer()
trait Line_Amount requires ILine:
    fn amount()

#
# Usage examples
#

# TODO: which style, generic like from_user or interface like to_user?
fn amt_to_user_since<U: User_SpendingAccounts<A>, A: Account_TransfersFrom<L> & Transfer_Date, L: Line_Amount>(from_user: U, to_user: #User_Id, since_date: Date):

    let total = 0
    for acc in from_user.spending_accounts():
        for transf in acc.transfers_from():
            if trans.date() >= since_date:
                for line transf.lines():
                    total += line.amount()
    return total


